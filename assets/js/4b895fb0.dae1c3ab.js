"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[67],{3239:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>d,contentTitle:()=>t,default:()=>h,frontMatter:()=>a,metadata:()=>i,toc:()=>l});var s=n(2540),o=n(3023);const a={},t="FormArray",i={id:"api/form-array",title:"FormArray",description:"A form array is a list of zero or more instances of the same form type.",source:"@site/../docs/api/form-array.mdx",sourceDirName:"api",slug:"/api/form-array",permalink:"/fielded/api/form-array",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Form",permalink:"/fielded/api/form"},next:{title:"Validation",permalink:"/fielded/api/validation"}},d={},l=[{value:"<code>constructor(rows)</code>",id:"constructorrows",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>.rows</code>",id:"rows",level:3},{value:"<code>.errors</code>",id:"errors",level:3},{value:"<code>.error</code>",id:"error",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>.add(rows)</code>",id:"addrows",level:3},{value:"<code>.remove(index)</code>",id:"removeindex",level:3},{value:"<code>.remove(row)</code>",id:"removerow",level:3},{value:"<code>.snapshot()</code>",id:"snapshot",level:3},{value:"<code>.reset()</code>",id:"reset",level:3},{value:"<code>.validate()</code>",id:"validate",level:3},{value:"<code>.addValidators(...validators)</code>",id:"addvalidatorsvalidators",level:3}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,o.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(r.h1,{id:"formarray",children:"FormArray"}),"\n",(0,s.jsx)(r.p,{children:"A form array is a list of zero or more instances of the same form type."}),"\n",(0,s.jsx)(r.p,{children:"For example, a list of your pets may look like the following:"}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:"class PetForm extends Form<{ name: Field<string>; animal: Field<string> }> {\n  constructor(name?: string, animal?: string) {\n    super({ name: Field.text(name), animal: Field.text(animal) });\n  }\n}\n\nconst pets = new FormArray<PetForm>();\n"})}),"\n",(0,s.jsx)(r.h2,{id:"constructorrows",children:(0,s.jsx)(r.code,{children:"constructor(rows)"})}),"\n",(0,s.jsxs)(r.p,{children:["Instantiates a new form array, optionally passing a list of ",(0,s.jsx)(r.code,{children:"rows"})," to add as initial values."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'const pets: FormArray<PetForm> = new FormArray([\n  new PetForm("Buddy", "dog"),\n  new PetForm("Zoe", "cat"),\n]);\n'})}),"\n",(0,s.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,s.jsx)(r.h3,{id:"rows",children:(0,s.jsx)(r.code,{children:".rows"})}),"\n",(0,s.jsx)(r.p,{children:"List of forms which this form array is currently comprised of."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'const pets = new FormArray([new PetForm("Buddy")]);\nconsole.log(pets.rows[0].fields.name.value); // prints "Buddy"\n'})}),"\n",(0,s.jsx)(r.h3,{id:"errors",children:(0,s.jsx)(r.code,{children:".errors"})}),"\n",(0,s.jsxs)(r.p,{children:["Observable list of validation errors of the form array.\nShorthand for ",(0,s.jsx)(r.code,{children:"array.validation.errors"}),"."]}),"\n",(0,s.jsx)(r.h3,{id:"error",children:(0,s.jsx)(r.code,{children:".error"})}),"\n",(0,s.jsxs)(r.p,{children:["Observable validation error of the form array, if any.\nShorthand for ",(0,s.jsx)(r.code,{children:"array.validation.errors[0]"}),"."]}),"\n",(0,s.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,s.jsx)(r.h3,{id:"addrows",children:(0,s.jsx)(r.code,{children:".add(rows)"})}),"\n",(0,s.jsxs)(r.p,{children:["Adds one or more rows to the list. Returns the ",(0,s.jsx)(r.code,{children:"FormArray"})," instance, useful for chaining."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'const pets = new FormArray<PetForm>();\npets.add(new PetForm("Zoe"));\nconsole.log(pets.rows[0].fields.name.value); // prints "Zoe"\n'})}),"\n",(0,s.jsx)(r.h3,{id:"removeindex",children:(0,s.jsx)(r.code,{children:".remove(index)"})}),"\n",(0,s.jsxs)(r.p,{children:["Removes a row from the list by its index. Returns the ",(0,s.jsx)(r.code,{children:"FormArray"})," instance, useful for chaining."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'const pets = new FormArray([new PetForm("Buddy"), new PetForm("Zoe")]);\npets.remove(1);\nconsole.log(pets.rows.length); // prints 1\nconsole.log(pets.rows[0].fields.name.value); // prints "Buddy"\n'})}),"\n",(0,s.jsx)(r.h3,{id:"removerow",children:(0,s.jsx)(r.code,{children:".remove(row)"})}),"\n",(0,s.jsxs)(r.p,{children:["Removes a row from the list by its reference. Returns the ",(0,s.jsx)(r.code,{children:"FormArray"})," instance, useful for chaining."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'const cat = new PetForm("Zoe");\nconst pets = new FormArray([cat]);\npets.remove(cat);\nconsole.log(pets.rows.length); // prints 0\n'})}),"\n",(0,s.jsx)(r.h3,{id:"snapshot",children:(0,s.jsx)(r.code,{children:".snapshot()"})}),"\n",(0,s.jsx)(r.p,{children:"Recursively snapshots the current state of the form and returns it as a plain JavaScript array."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'const characters = new FormArray([\n  new Form({ name: Field.text("Homer"), show: Field.text("The Simpsons") }),\n  new Form({ name: Field.text(""), show: Field.text() }),\n]);\n\nconsole.log(characters.snapshot());\n// prints [{ name: "Homer", show: "The Simpsons" }, { name: "" }]\n'})}),"\n",(0,s.jsx)(r.h3,{id:"reset",children:(0,s.jsx)(r.code,{children:".reset()"})}),"\n",(0,s.jsx)(r.p,{children:"Removes excess rows, adds missing rows, recursively resets each standing row, and removes the\nvalidation state."}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'const characters = new FormArray([new Form({ name: Field.text("Homer") })]);\ncharacters.remove(0);\ncharacters.add(new Form({ name: Field.text() }));\n\ncharacters.reset();\n\nconsole.log(characters.snapshot());\n// prints [{ name: "Homer" }];\n'})}),"\n",(0,s.jsx)(r.h3,{id:"validate",children:(0,s.jsx)(r.code,{children:".validate()"})}),"\n",(0,s.jsx)(r.p,{children:"Triggers validation using the form array's snapshot. All rows are validated as well."}),"\n",(0,s.jsxs)(r.p,{children:["Returns a promise for the finished ",(0,s.jsx)(r.a,{href:"/fielded/api/validation#validation-1",children:"validation state"}),"."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'const pets = new FormArray([]);\nconst validation = await pets.validate();\nif (validation.state === "valid") {\n  console.log("The pets list and all its nested pet forms are valid");\n}\n'})}),"\n",(0,s.jsx)(r.h3,{id:"addvalidatorsvalidators",children:(0,s.jsx)(r.code,{children:".addValidators(...validators)"})}),"\n",(0,s.jsxs)(r.p,{children:["Adds one or more validators.",(0,s.jsx)("br",{}),"\nA validator is either a function, or an object with a ",(0,s.jsx)(r.code,{children:"validate"})," function.\nIt takes a snapshot of the form and throws an error, or returns a promise that rejects, if the value is invalid."]}),"\n",(0,s.jsx)(r.pre,{children:(0,s.jsx)(r.code,{className:"language-ts",children:'function isNotEmpty(rows: FormSnapshot<PetForm[]>) {\n  if (rows.length === 0) {\n    throw new Error("No pets listed");\n  }\n}\n\nconst pets = new FormArray([]);\nawait pets.addValidators(isNotEmpty).validate();\nconsole.log(pets.error); // "No pets listed"\n'})})]})}function h(e={}){const{wrapper:r}={...(0,o.R)(),...e.components};return r?(0,s.jsx)(r,{...e,children:(0,s.jsx)(c,{...e})}):c(e)}},3023:(e,r,n)=>{n.d(r,{R:()=>t,x:()=>i});var s=n(3696);const o={},a=s.createContext(o);function t(e){const r=s.useContext(a);return s.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function i(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:t(e.components),s.createElement(a.Provider,{value:r},e.children)}}}]);