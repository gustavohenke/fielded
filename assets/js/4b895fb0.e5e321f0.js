"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[496],{5318:(e,r,t)=>{t.d(r,{Zo:()=>m,kt:()=>u});var n=t(7378);function o(e,r,t){return r in e?Object.defineProperty(e,r,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[r]=t,e}function a(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);r&&(n=n.filter((function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable}))),t.push.apply(t,n)}return t}function s(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?a(Object(t),!0).forEach((function(r){o(e,r,t[r])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):a(Object(t)).forEach((function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r))}))}return e}function l(e,r){if(null==e)return{};var t,n,o=function(e,r){if(null==e)return{};var t,n,o={},a=Object.keys(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||(o[t]=e[t]);return o}(e,r);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(n=0;n<a.length;n++)t=a[n],r.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(o[t]=e[t])}return o}var i=n.createContext({}),p=function(e){var r=n.useContext(i),t=r;return e&&(t="function"==typeof e?e(r):s(s({},r),e)),t},m=function(e){var r=p(e.components);return n.createElement(i.Provider,{value:r},e.children)},d={inlineCode:"code",wrapper:function(e){var r=e.children;return n.createElement(n.Fragment,{},r)}},c=n.forwardRef((function(e,r){var t=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,m=l(e,["components","mdxType","originalType","parentName"]),c=p(t),u=o,f=c["".concat(i,".").concat(u)]||c[u]||d[u]||a;return t?n.createElement(f,s(s({ref:r},m),{},{components:t})):n.createElement(f,s({ref:r},m))}));function u(e,r){var t=arguments,o=r&&r.mdxType;if("string"==typeof e||o){var a=t.length,s=new Array(a);s[0]=c;var l={};for(var i in r)hasOwnProperty.call(r,i)&&(l[i]=r[i]);l.originalType=e,l.mdxType="string"==typeof e?e:o,s[1]=l;for(var p=2;p<a;p++)s[p]=t[p];return n.createElement.apply(null,s)}return n.createElement.apply(null,t)}c.displayName="MDXCreateElement"},5124:(e,r,t)=>{t.r(r),t.d(r,{assets:()=>m,contentTitle:()=>i,default:()=>u,frontMatter:()=>l,metadata:()=>p,toc:()=>d});var n=t(5773),o=t(808),a=(t(7378),t(5318)),s=["components"],l={},i="FormArray",p={unversionedId:"api/form-array",id:"api/form-array",title:"FormArray",description:"A form array is a list of zero or more instances of the same form type.",source:"@site/../docs/api/form-array.mdx",sourceDirName:"api",slug:"/api/form-array",permalink:"/fielded/api/form-array",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Form",permalink:"/fielded/api/form"}},m={},d=[{value:"<code>constructor(rows)</code>",id:"constructorrows",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>.rows</code>",id:"rows",level:3},{value:"<code>.valid</code>",id:"valid",level:3},{value:"<code>.error</code>",id:"error",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>.add(rows)</code>",id:"addrows",level:3},{value:"<code>.remove(index)</code>",id:"removeindex",level:3},{value:"<code>.remove(row)</code>",id:"removerow",level:3},{value:"<code>.snapshot()</code>",id:"snapshot",level:3}],c={toc:d};function u(e){var r=e.components,t=(0,o.Z)(e,s);return(0,a.kt)("wrapper",(0,n.Z)({},c,t,{components:r,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"formarray"},"FormArray"),(0,a.kt)("p",null,"A form array is a list of zero or more instances of the same form type."),(0,a.kt)("p",null,"For example, a list of your pets may look like the following:"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},"class PetForm extends Form<{ name: Field<string>; animal: Field<string> }> {\n  constructor(name?: string, animal?: string) {\n    super({ name: Field.text(name), animal: Field.text(animal) });\n  }\n}\n\nconst pets = new FormArray<PetForm>();\n")),(0,a.kt)("h2",{id:"constructorrows"},(0,a.kt)("inlineCode",{parentName:"h2"},"constructor(rows)")),(0,a.kt)("p",null,"Instantiates a new form array, optionally passing a list of ",(0,a.kt)("inlineCode",{parentName:"p"},"rows")," to add as initial values."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const pets: FormArray<PetForm> = new FormArray([\n  new PetForm("Buddy", "dog"),\n  new PetForm("Zoe", "cat"),\n]);\n')),(0,a.kt)("h2",{id:"properties"},"Properties"),(0,a.kt)("h3",{id:"rows"},(0,a.kt)("inlineCode",{parentName:"h3"},".rows")),(0,a.kt)("p",null,"List of forms which this form array is currently comprised of."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const pets = new FormArray([new PetForm("Buddy")]);\nconsole.log(pets.rows[0].fields.name.value); // prints "Buddy"\n')),(0,a.kt)("h3",{id:"valid"},(0,a.kt)("inlineCode",{parentName:"h3"},".valid")),(0,a.kt)("p",null,(0,a.kt)("inlineCode",{parentName:"p"},"true")," if all of the nested forms and their fields are valid, ",(0,a.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,a.kt)("h3",{id:"error"},(0,a.kt)("inlineCode",{parentName:"h3"},".error")),(0,a.kt)("p",null,"Observable validation error of the first field that is invalid, if any."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'class PetForm extends Form<{ name: Field<string> }> {\n  constructor(name?: string) {\n    super({\n      name: Field.text(name).addValidators((value) => {\n        if (!value) {\n          return "Please type a name";\n        }\n      }),\n    });\n  }\n}\n\nconst characters = new FormArray([new PetForm("Buddy"), new PetForm()]);\n\nconsole.log(form.error); // prints "Please type a name"\n')),(0,a.kt)("h2",{id:"methods"},"Methods"),(0,a.kt)("h3",{id:"addrows"},(0,a.kt)("inlineCode",{parentName:"h3"},".add(rows)")),(0,a.kt)("p",null,"Adds one or more rows to the list. Returns the ",(0,a.kt)("inlineCode",{parentName:"p"},"FormArray")," instance, useful for chaining."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const pets = new FormArray<PetForm>();\npets.add(new PetForm("Zoe"));\nconsole.log(pets.rows[0].fields.name.value); // prints "Zoe"\n')),(0,a.kt)("h3",{id:"removeindex"},(0,a.kt)("inlineCode",{parentName:"h3"},".remove(index)")),(0,a.kt)("p",null,"Removes a row from the list by its index. Returns the ",(0,a.kt)("inlineCode",{parentName:"p"},"FormArray")," instance, useful for chaining."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const pets = new FormArray([new PetForm("Buddy"), new PetForm("Zoe")]);\npets.remove(1);\nconsole.log(pets.rows.length); // prints 1\nconsole.log(pets.rows[0].fields.name.value); // prints "Buddy"\n')),(0,a.kt)("h3",{id:"removerow"},(0,a.kt)("inlineCode",{parentName:"h3"},".remove(row)")),(0,a.kt)("p",null,"Removes a row from the list by its reference. Returns the ",(0,a.kt)("inlineCode",{parentName:"p"},"FormArray")," instance, useful for chaining."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const cat = new PetForm("Zoe");\nconst pets = new FormArray([cat]);\npets.remove(cat);\nconsole.log(pets.rows.length); // prints 0\n')),(0,a.kt)("h3",{id:"snapshot"},(0,a.kt)("inlineCode",{parentName:"h3"},".snapshot()")),(0,a.kt)("p",null,"Recursively snapshots the current state of the form and returns it as a plain JavaScript array."),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-ts"},'const characters = new FormArray([\n  new Form({ name: Field.text("Homer"), show: Field.text("The Simpsons") }),\n  new Form({ name: Field.text(""), show: Field.text() }),\n]);\n\nconsole.log(characters.snapshot());\n// prints [{ name: "Homer", show: "The Simpsons" }, { name: "" }]\n')))}u.isMDXComponent=!0}}]);