"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[970],{5318:(e,t,n)=>{n.d(t,{Zo:()=>s,kt:()=>f});var a=n(7378);function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function r(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){i(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function o(e,t){if(null==e)return{};var n,a,i=function(e,t){if(null==e)return{};var n,a,i={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(i[n]=e[n]);return i}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(i[n]=e[n])}return i}var d=a.createContext({}),p=function(e){var t=a.useContext(d),n=t;return e&&(n="function"==typeof e?e(t):r(r({},t),e)),n},s=function(e){var t=p(e.components);return a.createElement(d.Provider,{value:t},e.children)},u={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},c=a.forwardRef((function(e,t){var n=e.components,i=e.mdxType,l=e.originalType,d=e.parentName,s=o(e,["components","mdxType","originalType","parentName"]),c=p(n),f=i,v=c["".concat(d,".").concat(f)]||c[f]||u[f]||l;return n?a.createElement(v,r(r({ref:t},s),{},{components:n})):a.createElement(v,r({ref:t},s))}));function f(e,t){var n=arguments,i=t&&t.mdxType;if("string"==typeof e||i){var l=n.length,r=new Array(l);r[0]=c;var o={};for(var d in t)hasOwnProperty.call(t,d)&&(o[d]=t[d]);o.originalType=e,o.mdxType="string"==typeof e?e:i,r[1]=o;for(var p=2;p<l;p++)r[p]=n[p];return a.createElement.apply(null,r)}return a.createElement.apply(null,n)}c.displayName="MDXCreateElement"},8633:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>s,contentTitle:()=>d,default:()=>f,frontMatter:()=>o,metadata:()=>p,toc:()=>u});var a=n(5773),i=n(808),l=(n(7378),n(5318)),r=["components"],o={},d="Field",p={unversionedId:"api/field",id:"api/field",title:"Field",description:"A field is the most basic building block of fielded.",source:"@site/../docs/api/field.mdx",sourceDirName:"api",slug:"/api/field",permalink:"/fielded/api/field",draft:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/fielded/"},next:{title:"Form",permalink:"/fielded/api/form"}},s={},u=[{value:"Instantiating a <code>Field</code>",id:"instantiating-a-field",level:2},{value:"<code>Field.text(initialValue)</code>",id:"fieldtextinitialvalue",level:3},{value:"<code>Field.number(initialValue)</code>",id:"fieldnumberinitialvalue",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>.type</code>",id:"type",level:3},{value:"<code>.value</code>",id:"value",level:3},{value:"<code>.valid</code>",id:"valid",level:3},{value:"<code>.error</code>",id:"error",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>.set(value)</code>",id:"setvalue",level:3},{value:"<code>.addValidators(...validators)</code>",id:"addvalidatorsvalidators",level:3},{value:"<code>.getReactProps()</code>",id:"getreactprops",level:3}],c={toc:u};function f(e){var t=e.components,n=(0,i.Z)(e,r);return(0,l.kt)("wrapper",(0,a.Z)({},c,n,{components:t,mdxType:"MDXLayout"}),(0,l.kt)("h1",{id:"field"},"Field"),(0,l.kt)("p",null,"A field is the most basic building block of fielded.\nIt's where data is usually input by the user, and ultimately, where it's stored."),(0,l.kt)("h2",{id:"instantiating-a-field"},"Instantiating a ",(0,l.kt)("inlineCode",{parentName:"h2"},"Field")),(0,l.kt)("p",null,"There are some ways of creating a field. Each of the following methods creates an instance\nof ",(0,l.kt)("inlineCode",{parentName:"p"},"Field")," that is bound to a specific type."),(0,l.kt)("h3",{id:"fieldtextinitialvalue"},(0,l.kt)("inlineCode",{parentName:"h3"},"Field.text(initialValue)")),(0,l.kt)("p",null,"Creates a text field, optionally taking an initial value. Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"Field<string>"),"."),(0,l.kt)("h3",{id:"fieldnumberinitialvalue"},(0,l.kt)("inlineCode",{parentName:"h3"},"Field.number(initialValue)")),(0,l.kt)("p",null,"Creates a number field, optionally taking an initial value. Returns a ",(0,l.kt)("inlineCode",{parentName:"p"},"Field<number>"),"."),(0,l.kt)("h2",{id:"properties"},"Properties"),(0,l.kt)("h3",{id:"type"},(0,l.kt)("inlineCode",{parentName:"h3"},".type")),(0,l.kt)("p",null,"What the underlying type of the field is.\nEither ",(0,l.kt)("inlineCode",{parentName:"p"},"text")," or ",(0,l.kt)("inlineCode",{parentName:"p"},"number"),"."),(0,l.kt)("h3",{id:"value"},(0,l.kt)("inlineCode",{parentName:"h3"},".value")),(0,l.kt)("p",null,"Observable value of the field (if any)."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'const nameField = Field.text("John Doe");\n\nconsole.log(nameField.value); // prints "John Doe"\n')),(0,l.kt)("h3",{id:"valid"},(0,l.kt)("inlineCode",{parentName:"h3"},".valid")),(0,l.kt)("p",null,(0,l.kt)("inlineCode",{parentName:"p"},"true")," if the field value is currently valid, ",(0,l.kt)("inlineCode",{parentName:"p"},"false")," otherwise."),(0,l.kt)("h3",{id:"error"},(0,l.kt)("inlineCode",{parentName:"h3"},".error")),(0,l.kt)("p",null,"Observable validation error of the field, if any."),(0,l.kt)("p",null,"See also ",(0,l.kt)("a",{parentName:"p",href:"#addvalidatorsvalidators"},(0,l.kt)("inlineCode",{parentName:"a"},"addValidators()"))),(0,l.kt)("h2",{id:"methods"},"Methods"),(0,l.kt)("h3",{id:"setvalue"},(0,l.kt)("inlineCode",{parentName:"h3"},".set(value)")),(0,l.kt)("p",null,"Updates the value of the field to be ",(0,l.kt)("inlineCode",{parentName:"p"},"value"),". Returns the field itself, useful for chaining."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},"const value = Field.number().set(42).value;\nconsole.log(value); // prints 42\n")),(0,l.kt)("h3",{id:"addvalidatorsvalidators"},(0,l.kt)("inlineCode",{parentName:"h3"},".addValidators(...validators)")),(0,l.kt)("p",null,"Adds one or more validators.",(0,l.kt)("br",null),"\nA validator is a function which takes the current field value, and may return an error string which\nbecomes the field's error."),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-ts"},'function validateRequired(value: string | undefined) {\n  if (!value) {\n    return "Please type a value.";\n  }\n}\n\nfunction validateWeekDay(value: string | undefined) {\n  if (value === "saturday" || value === "sunday") {\n    return "Please choose a week day.";\n  }\n}\n\nconst day = Field.text("sunday").addValidators(validateRequired, validateWeekDay);\nconsole.log(day.error); // prints "Please choose a week day."\n')),(0,l.kt)("admonition",{type:"info"},(0,l.kt)("p",{parentName:"admonition"},"Asynchronous validation is not yet supported.")),(0,l.kt)("h3",{id:"getreactprops"},(0,l.kt)("inlineCode",{parentName:"h3"},".getReactProps()")),(0,l.kt)("p",null,"Builds and returns a bag of observable React props, useful for rendering an input that represents\nthis field."),(0,l.kt)("p",null,"The props that are returned are:"),(0,l.kt)("ul",null,(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"type"),": the ",(0,l.kt)("a",{parentName:"li",href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types"},"HTML input type"),"\nbest suited to this field, as per its own type;"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"value"),": the current field value, or an empty string, if there's none;"),(0,l.kt)("li",{parentName:"ul"},(0,l.kt)("inlineCode",{parentName:"li"},"onChange"),": a change event handler which updates the ",(0,l.kt)("inlineCode",{parentName:"li"},"Field")," instance with the input values,\ncasting them to match the field's internal type.")),(0,l.kt)("pre",null,(0,l.kt)("code",{parentName:"pre",className:"language-tsx"},'import { observer } from "mobx-react";\n\nconst SomeComponent = observer(({ field }: { field: Field<any> }) => {\n  return <input {...field.getReactProps()} />;\n});\n')))}f.isMDXComponent=!0}}]);