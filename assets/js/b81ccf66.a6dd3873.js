"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[706],{6189:(e,i,n)=>{n.r(i),n.d(i,{assets:()=>s,contentTitle:()=>a,default:()=>h,frontMatter:()=>t,metadata:()=>r,toc:()=>o});var l=n(2540),d=n(3023);const t={},a="Field",r={id:"api/field",title:"Field",description:"A field is the most basic building block of fielded.",source:"@site/../docs/api/field.mdx",sourceDirName:"api",slug:"/api/field",permalink:"/api/field",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Getting Started",permalink:"/"},next:{title:"Form",permalink:"/api/form"}},s={},o=[{value:"Instantiating a <code>Field</code>",id:"instantiating-a-field",level:2},{value:"<code>Field.text(initialValue)</code>",id:"fieldtextinitialvalue",level:3},{value:"<code>Field.number(initialValue)</code>",id:"fieldnumberinitialvalue",level:3},{value:"Properties",id:"properties",level:2},{value:"<code>.type</code>",id:"type",level:3},{value:"<code>.value</code>",id:"value",level:3},{value:"<code>.validation</code>",id:"validation",level:3},{value:"<code>.errors</code>",id:"errors",level:3},{value:"<code>.error</code>",id:"error",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>.set(value)</code>",id:"setvalue",level:3},{value:"<code>.validate()</code>",id:"validate",level:3},{value:"<code>.addValidators(...validators)</code>",id:"addvalidatorsvalidators",level:3},{value:"<code>.getReactProps()</code>",id:"getreactprops",level:3}];function c(e){const i={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",li:"li",p:"p",pre:"pre",ul:"ul",...(0,d.R)(),...e.components};return(0,l.jsxs)(l.Fragment,{children:[(0,l.jsx)(i.h1,{id:"field",children:"Field"}),"\n",(0,l.jsx)(i.p,{children:"A field is the most basic building block of fielded.\nIt's where data is usually input by the user, and ultimately, where it's stored."}),"\n",(0,l.jsxs)(i.h2,{id:"instantiating-a-field",children:["Instantiating a ",(0,l.jsx)(i.code,{children:"Field"})]}),"\n",(0,l.jsxs)(i.p,{children:["There are some ways of creating a field. Each of the following methods creates an instance\nof ",(0,l.jsx)(i.code,{children:"Field"})," that is bound to a specific type."]}),"\n",(0,l.jsx)(i.h3,{id:"fieldtextinitialvalue",children:(0,l.jsx)(i.code,{children:"Field.text(initialValue)"})}),"\n",(0,l.jsxs)(i.p,{children:["Creates a text field, optionally taking an initial value. Returns a ",(0,l.jsx)(i.code,{children:"Field<string | undefined>"}),"."]}),"\n",(0,l.jsx)(i.h3,{id:"fieldnumberinitialvalue",children:(0,l.jsx)(i.code,{children:"Field.number(initialValue)"})}),"\n",(0,l.jsxs)(i.p,{children:["Creates a number field, optionally taking an initial value. Returns a ",(0,l.jsx)(i.code,{children:"Field<number | undefined>"}),"."]}),"\n",(0,l.jsx)(i.h2,{id:"properties",children:"Properties"}),"\n",(0,l.jsx)(i.h3,{id:"type",children:(0,l.jsx)(i.code,{children:".type"})}),"\n",(0,l.jsxs)(i.p,{children:["What the underlying type of the field is.\nEither ",(0,l.jsx)(i.code,{children:"text"})," or ",(0,l.jsx)(i.code,{children:"number"}),"."]}),"\n",(0,l.jsx)(i.h3,{id:"value",children:(0,l.jsx)(i.code,{children:".value"})}),"\n",(0,l.jsx)(i.p,{children:"Observable value of the field (if any)."}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-ts",children:'const nameField = Field.text("John Doe");\n\nconsole.log(nameField.value); // prints "John Doe"\n'})}),"\n",(0,l.jsx)(i.h3,{id:"validation",children:(0,l.jsx)(i.code,{children:".validation"})}),"\n",(0,l.jsxs)(i.p,{children:["A ",(0,l.jsx)(i.a,{href:"/api/validation",children:(0,l.jsx)(i.code,{children:"Validation"})})," object representing the field's state of validation.\nUndefined unless the field value has been set before."]}),"\n",(0,l.jsx)(i.h3,{id:"errors",children:(0,l.jsx)(i.code,{children:".errors"})}),"\n",(0,l.jsxs)(i.p,{children:["Observable list of validation errors of the field.\nShorthand for ",(0,l.jsx)(i.code,{children:"field.validation.errors"}),"."]}),"\n",(0,l.jsx)(i.h3,{id:"error",children:(0,l.jsx)(i.code,{children:".error"})}),"\n",(0,l.jsxs)(i.p,{children:["Observable validation error of the field, if any.\nShorthand for ",(0,l.jsx)(i.code,{children:"field.validation.errors[0]"}),"."]}),"\n",(0,l.jsx)(i.h2,{id:"methods",children:"Methods"}),"\n",(0,l.jsx)(i.h3,{id:"setvalue",children:(0,l.jsx)(i.code,{children:".set(value)"})}),"\n",(0,l.jsxs)(i.p,{children:["Updates the value of the field to be ",(0,l.jsx)(i.code,{children:"value"}),", and validates it.\nReturns the field itself, useful for chaining."]}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-ts",children:"const value = Field.number().set(42).value;\nconsole.log(value); // prints 42\n"})}),"\n",(0,l.jsx)(i.h3,{id:"validate",children:(0,l.jsx)(i.code,{children:".validate()"})}),"\n",(0,l.jsxs)(i.p,{children:["Triggers validation using the field's current value.\nReturns a promise for the finished ",(0,l.jsx)(i.a,{href:"/api/validation#validation-1",children:"validation state"}),"."]}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-ts",children:'const field = Field.number(42);\nconst validation = await field.validate();\nif (validation.state === "valid") {\n  console.log(`The field\'s value ${validation.value} is valid`);\n}\n'})}),"\n",(0,l.jsx)(i.h3,{id:"addvalidatorsvalidators",children:(0,l.jsx)(i.code,{children:".addValidators(...validators)"})}),"\n",(0,l.jsxs)(i.p,{children:["Adds one or more validators.",(0,l.jsx)("br",{}),"\nA validator is either a function, or an object with a ",(0,l.jsx)(i.code,{children:"validate"})," function.\nIt takes the current field value and throws an error, or returns a promise that rejects, if the value is invalid."]}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-ts",children:'const required = {\n  validate(value: string | undefined) {\n    if (!value) {\n      throw new Error("Please type a value.");\n    }\n  },\n};\n\nfunction validateWeekDay(value: string | undefined) {\n  if (value === "saturday" || value === "sunday") {\n    throw new Error("Please choose a week day.");\n  }\n}\n\nconst day = Field.text().addValidators(required, validateWeekDay);\nday.set("sunday");\nconsole.log(day.error); // "Please choose a week day."\n'})}),"\n",(0,l.jsx)(i.h3,{id:"getreactprops",children:(0,l.jsx)(i.code,{children:".getReactProps()"})}),"\n",(0,l.jsx)(i.p,{children:"Builds and returns a bag of observable React props, useful for rendering an input that represents\nthis field."}),"\n",(0,l.jsx)(i.p,{children:"The props that are returned are:"}),"\n",(0,l.jsxs)(i.ul,{children:["\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"type"}),": the ",(0,l.jsx)(i.a,{href:"https://developer.mozilla.org/en-US/docs/Web/HTML/Element/input#input_types",children:"HTML input type"}),"\nbest suited to this field, as per its own type;"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"value"}),": the current field value, or an empty string, if there's none;"]}),"\n",(0,l.jsxs)(i.li,{children:[(0,l.jsx)(i.code,{children:"onChange"}),": a change event handler which updates the ",(0,l.jsx)(i.code,{children:"Field"})," instance with the input values,\ncasting them to match the field's internal type."]}),"\n"]}),"\n",(0,l.jsx)(i.pre,{children:(0,l.jsx)(i.code,{className:"language-tsx",children:'import { observer } from "mobx-react";\n\nconst SomeComponent = observer(({ field }: { field: Field<any> }) => {\n  return <input {...field.getReactProps()} />;\n});\n'})})]})}function h(e={}){const{wrapper:i}={...(0,d.R)(),...e.components};return i?(0,l.jsx)(i,{...e,children:(0,l.jsx)(c,{...e})}):c(e)}},3023:(e,i,n)=>{n.d(i,{R:()=>a,x:()=>r});var l=n(3696);const d={},t=l.createContext(d);function a(e){const i=l.useContext(t);return l.useMemo((function(){return"function"==typeof e?e(i):{...i,...e}}),[i,e])}function r(e){let i;return i=e.disableParentContext?"function"==typeof e.components?e.components(d):e.components||d:a(e.components),l.createElement(t.Provider,{value:i},e.children)}}}]);