"use strict";(self.webpackChunk=self.webpackChunk||[]).push([[141],{3075:(e,r,n)=>{n.r(r),n.d(r,{assets:()=>a,contentTitle:()=>d,default:()=>h,frontMatter:()=>s,metadata:()=>l,toc:()=>t});var o=n(2540),i=n(3023);const s={},d="Form",l={id:"api/form",title:"Form",description:"A form is a composition of one or more fields.",source:"@site/../docs/api/form.mdx",sourceDirName:"api",slug:"/api/form",permalink:"/fielded/api/form",draft:!1,unlisted:!1,tags:[],version:"current",frontMatter:{},sidebar:"sidebar",previous:{title:"Field",permalink:"/fielded/api/field"},next:{title:"FormArray",permalink:"/fielded/api/form-array"}},a={},t=[{value:"<code>constructor(fields)</code>",id:"constructorfields",level:2},{value:"Properties",id:"properties",level:2},{value:"<code>.fields</code>",id:"fields",level:3},{value:"<code>.validation</code>",id:"validation",level:3},{value:"<code>.errors</code>",id:"errors",level:3},{value:"<code>.error</code>",id:"error",level:3},{value:"<code>.fieldErrors</code>",id:"fielderrors",level:3},{value:"<code>.fieldError</code>",id:"fielderror",level:3},{value:"<code>.formErrors</code>",id:"formerrors",level:3},{value:"<code>.formError</code>",id:"formerror",level:3},{value:"Methods",id:"methods",level:2},{value:"<code>.snapshot()</code>",id:"snapshot",level:3},{value:"<code>.reset()</code>",id:"reset",level:3},{value:"<code>.validate()</code>",id:"validate",level:3},{value:"<code>.addValidators(...validators)</code>",id:"addvalidatorsvalidators",level:3}];function c(e){const r={a:"a",code:"code",h1:"h1",h2:"h2",h3:"h3",p:"p",pre:"pre",...(0,i.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(r.h1,{id:"form",children:"Form"}),"\n",(0,o.jsx)(r.p,{children:"A form is a composition of one or more fields.\nA form may even contain other nested forms inside it."}),"\n",(0,o.jsx)(r.h2,{id:"constructorfields",children:(0,o.jsx)(r.code,{children:"constructor(fields)"})}),"\n",(0,o.jsxs)(r.p,{children:["Instantiates a new form. ",(0,o.jsx)(r.code,{children:"fields"})," must be an object which is comprised of ",(0,o.jsx)(r.a,{href:"./field",children:(0,o.jsx)(r.code,{children:"Field"})})," or ",(0,o.jsx)(r.a,{href:"./form-array",children:(0,o.jsx)(r.code,{children:"FormArray"})})," instances."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:"const form = new Form({\n  name: Field.text(),\n  age: Field.number(),\n  job: new Form({\n    companyName: Field.text(),\n    role: Field.text(),\n  }),\n});\n"})}),"\n",(0,o.jsx)(r.h2,{id:"properties",children:"Properties"}),"\n",(0,o.jsx)(r.h3,{id:"fields",children:(0,o.jsx)(r.code,{children:".fields"})}),"\n",(0,o.jsx)(r.p,{children:"Map of fields that this form is composed of."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'const form = new Form({\n  name: Field.text("John Doe"),\n  age: Field.number(),\n});\n\nconsole.log(form.fields.name.value); // prints "John Doe"\n'})}),"\n",(0,o.jsx)(r.h3,{id:"validation",children:(0,o.jsx)(r.code,{children:".validation"})}),"\n",(0,o.jsxs)(r.p,{children:["A ",(0,o.jsx)(r.a,{href:"/fielded/api/validation",children:(0,o.jsx)(r.code,{children:"Validation"})})," object representing the field's state of validation.\nUndefined unless the form has been validated before."]}),"\n",(0,o.jsx)(r.h3,{id:"errors",children:(0,o.jsx)(r.code,{children:".errors"})}),"\n",(0,o.jsx)(r.p,{children:"Observable list of validation errors of the form's fields, or if there aren't any,\nits own validation errors."}),"\n",(0,o.jsx)(r.h3,{id:"error",children:(0,o.jsx)(r.code,{children:".error"})}),"\n",(0,o.jsxs)(r.p,{children:["Observable, first validation error from the form's fields, or if there aren't any,\nthe first from its own validation errors.\nShorthand for ",(0,o.jsx)(r.code,{children:"form.errors[0]"}),"."]}),"\n",(0,o.jsx)(r.h3,{id:"fielderrors",children:(0,o.jsx)(r.code,{children:".fieldErrors"})}),"\n",(0,o.jsx)(r.p,{children:"Observable list of validation errors from the form's fields."}),"\n",(0,o.jsx)(r.h3,{id:"fielderror",children:(0,o.jsx)(r.code,{children:".fieldError"})}),"\n",(0,o.jsxs)(r.p,{children:["Observable first validation error from the form's fields.\nShorthand for ",(0,o.jsx)(r.code,{children:"form.fieldErrors[0]"}),"."]}),"\n",(0,o.jsx)(r.h3,{id:"formerrors",children:(0,o.jsx)(r.code,{children:".formErrors"})}),"\n",(0,o.jsxs)(r.p,{children:["Observable list of validation errors from the form itself.\nShorthand for ",(0,o.jsx)(r.code,{children:"form.validation.errors"}),"."]}),"\n",(0,o.jsx)(r.h3,{id:"formerror",children:(0,o.jsx)(r.code,{children:".formError"})}),"\n",(0,o.jsxs)(r.p,{children:["Observable validation error from the form itself.\nShorthand for ",(0,o.jsx)(r.code,{children:"form.formErrors[0]"}),"."]}),"\n",(0,o.jsx)(r.h2,{id:"methods",children:"Methods"}),"\n",(0,o.jsx)(r.h3,{id:"snapshot",children:(0,o.jsx)(r.code,{children:".snapshot()"})}),"\n",(0,o.jsx)(r.p,{children:"Recursively snapshots the current state of the form and returns it as a plain JavaScript object."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'const form = new Form({\n  name: Field.text("John Doe"),\n  hobbies: new FormArray([\n    new Form({ description: Field.text("photography") }),\n    new Form({ description: Field.text() }),\n  ]),\n});\n\nconsole.log(form.snapshot());\n// prints { name: "John Doe", hobbies: [{ description: "photography" }, {}] }\n'})}),"\n",(0,o.jsx)(r.h3,{id:"reset",children:(0,o.jsx)(r.code,{children:".reset()"})}),"\n",(0,o.jsx)(r.p,{children:"Recursively resets each field and removes the validation state."}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'const form = new Form({\n  name: Field.text("John Doe"),\n});\nform.fields.name.set("Johnny Doe");\nform.reset();\n\nconsole.log(form.snapshot());\n// prints { name: "John Doe" };\n'})}),"\n",(0,o.jsx)(r.h3,{id:"validate",children:(0,o.jsx)(r.code,{children:".validate()"})}),"\n",(0,o.jsx)(r.p,{children:"Triggers validation using the form's snapshot. All fields are validated as well."}),"\n",(0,o.jsxs)(r.p,{children:["Returns a promise for the finished ",(0,o.jsx)(r.a,{href:"/fielded/api/validation#validation-1",children:"validation state"}),"."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'const form = new Form({ name: Field.text() });\nconst validation = await form.validate();\nif (validation.state === "valid") {\n  console.log("The form and all its fields are valid");\n}\n'})}),"\n",(0,o.jsx)(r.h3,{id:"addvalidatorsvalidators",children:(0,o.jsx)(r.code,{children:".addValidators(...validators)"})}),"\n",(0,o.jsxs)(r.p,{children:["Adds one or more validators.",(0,o.jsx)("br",{}),"\nA validator is either a function, or an object with a ",(0,o.jsx)(r.code,{children:"validate"})," function.\nIt takes a snapshot of the form and throws an error, or returns a promise that rejects, if the value is invalid."]}),"\n",(0,o.jsx)(r.pre,{children:(0,o.jsx)(r.code,{className:"language-ts",children:'function isAnswer({ number1, number2 }: { number1: number; number2: number }) {\n  if (number1 + number2 !== 42) {\n    throw new Error("Not the right answer");\n  }\n}\n\nconst answer = new Form({\n  number1: Field.number(),\n  number2: Field.number(),\n});\nawait answer.addValidators(isAnswer).validate();\nconsole.log(answer.error); // "Not the right answer"\n'})})]})}function h(e={}){const{wrapper:r}={...(0,i.R)(),...e.components};return r?(0,o.jsx)(r,{...e,children:(0,o.jsx)(c,{...e})}):c(e)}},3023:(e,r,n)=>{n.d(r,{R:()=>d,x:()=>l});var o=n(3696);const i={},s=o.createContext(i);function d(e){const r=o.useContext(s);return o.useMemo((function(){return"function"==typeof e?e(r):{...r,...e}}),[r,e])}function l(e){let r;return r=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),o.createElement(s.Provider,{value:r},e.children)}}}]);